processUserSignUp:
    handler: src/functions/userManagement/processUserSignUp.handler
    events:
        - cognitoUserPool:
              pool: ${env:COGNITO_USER_POOL_NAME}
              trigger: PreSignUp
              existing: true
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:PutItem
          Resource:
              Fn::GetAtt: [UsersTable, Arn]
followUser: # TODO: Implement this
    handler: src/functions/userManagement/followUser.handler
    events:
        - httpApi:
              path: /follow/{id}
              method: patch
              authorizer:
                  name: jwtCognitoAuthorizer
editBio: # TODO: Implement this
    handler: src/functions/userManagement/editBio.handler
    events:
        - httpApi:
              path: /account/edit/bio
              method: patch
              authorizer:
                  name: jwtCognitoAuthorizer
editProfilePicture: # TODO: Implement this
    handler: src/functions/userManagement/editProfilePicture.handler
    events:
        - httpApi:
              path: /account/edit/profile-pic
              method: patch
              authorizer:
                  name: jwtCognitoAuthorizer
uploadPresignedUrl:
    handler: src/functions/imageProcessing/uploadPresignedUrl.handler
    events:
        - httpApi:
              path: /upload-url
              method: post
              authorizer:
                  name: jwtCognitoAuthorizer
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:PutItem
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
        - Effect: Allow
          Action:
              - s3:PutObject
          Resource:
              Fn::Sub: 'arn:aws:s3:::${self:custom.s3ImagesBucket}/uploads/*'
processImage:
    handler: src/functions/imageProcessing/processImage.handler
    events:
        - s3:
              bucket: ${self:custom.s3ImagesBucket}
              event: s3:ObjectCreated:Put
              rules:
                  - prefix: uploads/
              existing: true
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
              - dynamodb:UpdateItem
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
        - Effect: Allow
          Action:
              - dynamodb:BatchWriteItem
          Resource:
              Fn::GetAtt: [LabelsTable, Arn]
        - Effect: Allow
          Action:
              - dynamodb:UpdateItem
          Resource:
              Fn::GetAtt: [UsersTable, Arn]
        - Effect: Allow
          Action:
              - rekognition:DetectLabels
              - rekognition:IndexFaces
          Resource:
              Fn::Sub: 'arn:aws:rekognition:${aws:region}:${aws:accountId}:collection/${self:custom.rekognitionCollectionId}'
getImagesCategory:
    handler: src/functions/imageProcessing/getImagesCategory.handler
    events:
        - httpApi:
              path: /images/category/{category}
              method: get
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::Join:
                  - '/'
                  - - Fn::GetAtt: [ImagesTable, Arn]
                    - index
                    - category-uploadedAt-index
getImagesUser:
    handler: src/functions/imageProcessing/getImagesUser.handler
    events:
        - httpApi:
              path: /images/user/{username}
              method: get
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::Join:
                  - '/'
                  - - Fn::GetAtt: [ImagesTable, Arn]
                    - index
                    - userId-imageId-index
        - Effect: Allow
          Action:
              - cognito-idp:AdminGetUser
          Resource:
              Fn::Sub: 'arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/${env:COGNITO_USER_POOL}'
getImagesLabel:
    handler: src/functions/imageProcessing/getImagesLabel.handler
    events:
        - httpApi:
              path: /images/label/{label}
              method: get
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::GetAtt: [LabelsTable, Arn]
        - Effect: Allow
          Action:
              - dynamodb:GetItem
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
getImage:
    handler: src/functions/imageProcessing/getImage.handler
    events:
        - httpApi:
              path: /image/{id}
              method: get
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:UpdateItem
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
        - Effect: Allow
          Action:
              - dynamodb:UpdateItem
          Resource:
              Fn::GetAtt: [UsersTable, Arn]
likeImage:
    handler: src/functions/imageProcessing/likeImage.handler
    events:
        - httpApi:
              path: /image/{id}/like
              method: post
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
        - Effect: Allow
          Action:
              - dynamodb:UpdateItem
          Resource:
              Fn::GetAtt: [UsersTable, Arn]
deleteImage:
    handler: src/functions/imageProcessing/deleteImage.handler
    events:
        - httpApi:
              path: /image/{id}
              method: delete
              authorizer:
                  name: jwtCognitoAuthorizer
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:GetItem
              - dynamodb:DeleteItem
          Resource:
              - Fn::GetAtt: [ImagesTable, Arn]
              - Fn::GetAtt: [LabelsTable, Arn]
        - Effect: Allow
          Action:
              - s3:DeleteObject
              - s3:ListBucket
          Resource:
              Fn::Sub: 'arn:aws:s3:::${self:custom.s3ImagesBucket}/uploads/*'
        - Effect: Allow
          Action:
              - rekognition:DeleteFaces
          Resource:
              Fn::Sub: 'arn:aws:rekognition:${aws:region}:${aws:accountId}:collection/${self:custom.rekognitionCollectionId}'

updateTrendingImages:
    handler: src/functions/imageProcessing/updateTrendingImages.handler
    # Uncomment the 'events' property to make the function be periodically executed
    # events:
    # - eventBridge:
    #       schedule: rate(1 day)
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Scan
              - dynamodb:UpdateItem
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::Join:
                  - '/'
                  - - Fn::GetAtt: [ImagesTable, Arn]
                    - index
                    - category-uploadedAt-index
