uploadPresignedUrl:
    handler: src/functions/uploadPresignedUrl.handler
    events:
        - httpApi:
              path: /upload-url
              method: post
              authorizer:
                  name: jwtCognitoAuthorizer
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:PutItem
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
        - Effect: Allow
          Action:
              - s3:PutObject
          Resource:
              Fn::Sub: 'arn:aws:s3:::${self:custom.s3ImagesBucket}/uploads/*'
processImage:
    handler: src/functions/processImage.handler
    events:
        - s3:
              bucket: ${self:custom.s3ImagesBucket}
              event: s3:ObjectCreated:Put
              rules:
                  - prefix: uploads/
              existing: true
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
              - dynamodb:UpdateItem
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
        - Effect: Allow
          Action:
              - dynamodb:BatchWriteItem
          Resource:
              Fn::GetAtt: [LabelsTable, Arn]
        - Effect: Allow
          Action:
              - rekognition:DetectLabels
              - rekognition:IndexFaces
          Resource:
              Fn::Sub: 'arn:aws:rekognition:${aws:region}:${aws:accountId}:collection/${self:custom.rekognitionCollectionId}'
getImagesCategory:
    handler: src/functions/getImagesCategory.handler
    events:
        - httpApi:
              path: /images/category/{category}
              method: get
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
getImagesUser:
    handler: src/functions/getImagesUser.handler
    events:
        - httpApi:
              path: /images/user/{username}
              method: get
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
        - Effect: Allow
          Action:
              - cognito-idp:AdminGetUser
          Resource:
              Fn::Sub: 'arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/${env:COGNITO_USER_POOL}'
getImagesLabel:
    handler: src/functions/getImagesLabel.handler
    events:
        - httpApi:
              path: /images/label/{label}
              method: get
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              Fn::GetAtt: [LabelsTable, Arn]
        - Effect: Allow
          Action:
              - dynamodb:GetItem
          Resource:
              Fn::GetAtt: [ImagesTable, Arn]
getImage:
    handler: src/functions/getImage.handler
    events:
        - httpApi:
              path: /image/{id}
              method: get
likeImage:
    handler: src/functions/likeImage.handler
    events:
        - httpApi:
              path: /image/{id}/like
              method: post
deleteImage:
    handler: src/functions/deleteImage.handler
    events:
        - httpApi:
              path: /image/{id}
              method: delete
              authorizer:
                  name: jwtCognitoAuthorizer
updateTrendingImages: # Called periodically to set the trending category to images (AWS EventBridge Schedule)
    handler: src/functions/updateTrendingImages.handler
